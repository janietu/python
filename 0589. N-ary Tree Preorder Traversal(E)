"""
# Definition for a Node.
class Node:
    def __init__(self, val=None, children=None):
        self.val = val
        self.children = children
"""

class Solution:
    def preorder(self, root: 'Node') -> List[int]:
        def dsf(root):
            if root:
                res.append(root.val)
                for child in root.children:
                    dsf(child)
        res=[]
        dsf(root)
        return res



-----------de queue ------
"""
# Definition for a Node.
class Node:
    def __init__(self, val=None, children=None):
        self.val = val
        self.children = children
"""

class Solution:
    def preorder(self, root: 'Node') -> List[int]:
        if not root: return []
        queue = deque([root])
        res = []
    
        while queue:
            node = queue.popleft()
            res.append(node.val)
            for child in reversed(node.children):
                queue.appendleft(child)
                

        return res
