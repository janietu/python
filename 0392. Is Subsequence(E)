very slow

class Solution:
    def isSubsequence(self, s: str, t: str) -> bool:
        slen=0
        tlen=0
        if len(s)==0: 
            return True
        
        if len(s)>len(t):
            return False
        
        while(slen<len(s) and tlen<len(t)):
            if s[slen]==t[tlen]:
                slen+=1    
            tlen+=1
            
            if slen==len(s):
                return True
        return False
            
        


一個一個確認s的字元是否在t內
不在就回傳False
在的話就找出其位置(x),將t變為x後的字串
因為要防止元素都在t內,但順序不一樣的可能
最後執行時間32ms(faster than 94.61%)

class Solution:
    def isSubsequence(self, s: str, t: str) -> bool:
        for ss in s:
            if ss in t:
                i=t.index(ss)
                t = t[i+1:]
            else: 
                return False
        return True
