一個一個比較
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        dummy = ListNode()
        tail = dummy
        while list1 and list2:
    
            if list1.val<list2.val:
                tail.next = list1
                list1 = list1.next
            else:
                tail.next = list2
                list2 = list2.next
            tail=tail.next
        if list1:
            tail.next = list1
        if list2:
            tail.next = list2
            
        return dummy.next
        
--------------------------------------        
recusive way



# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        def findMin(n1,n2):
            if n1 == None:
                return n2
            if n2 == None:
                return n1
            if n1.val<n2.val:
                n1.next = findMin(n1.next , n2)
                return n1
            else:
                n2.next = findMin(n1,n2.next)
                return n2
        return findMin(list1,list2)
    
